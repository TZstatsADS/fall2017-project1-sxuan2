round(apply(x2_female, 2, mean),2)
x_svr_total <- x2[which(x2$Survived == 1) ,]
x_svrf <- x2[which((x2$Survived == 1) &(x2$Sex == 'female')),]
round(nrow(x_svrf)/nrow(x_svr_total),2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
print(Pclass.Survival[i] = y)
}
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
new_col <- rep(NA, nrow(titanic))
new_col[titanic['Survived'] == 0] = 'died'
new_col[titanic['Survived'] == 1] = 'survived'
titanic['Survived.Word'] = new_col
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
# The mean of 'Survived' tells us that about 38.38% of people are survived.
# The mean of 'Age' is NA since there are NA in the column of 'Age'.
new_col4 <- titanic['Sex']
x2 <- cbind(new_col1,new_col2,new_col3,new_col4)
x2_female <- x2[which(x2$Sex=='female'),][,1:3]
round(apply(x2_female, 2, mean),2)
x_svr_total <- x2[which(x2$Survived == 1) ,]
x_svrf <- x2[which((x2$Survived == 1) &(x2$Sex == 'female')),]
round(nrow(x_svrf)/nrow(x_svr_total),2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
print(Pclass.Survival[i])
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == i) ,]
x_svrfi <- titanic[which((titanic$Survived == i) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
print(y)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == 1) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
print(y)
}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == 1) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
?gl
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
tapply(x, f, mean)
x
f
round(tapply(titanic$Survived, 2, titanic$Pclass, mean),2)
round(tapply(titanic$Survived, 2, titanic$Pclass, FUN = mean),2)
round(tapply(titanic$Survived, titanic$Pclass, FUN = mean),2)
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
new_col <- rep(NA, nrow(titanic))
new_col[titanic['Survived'] == 0] = 'died'
new_col[titanic['Survived'] == 1] = 'survived'
titanic['Survived.Word'] = new_col
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
# The mean of 'Survived' tells us that about 38.38% of people are survived.
# The mean of 'Age' is NA since there are NA in the column of 'Age'.
new_col4 <- titanic['Sex']
x2 <- cbind(new_col1,new_col2,new_col3,new_col4)
x2_female <- x2[which(x2$Sex=='female'),][,1:3]
round(apply(x2_female, 2, mean),2)
x_svr_total <- x2[which(x2$Survived == 1) ,]
x_svrf <- x2[which((x2$Survived == 1) &(x2$Sex == 'female')),]
round(nrow(x_svrf)/nrow(x_svr_total),2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Survived == 1) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
Pclass.Survival2 <- Pclass.Survival
round(tapply(titanic$Survived, titanic$Pclass, FUN = mean),2)
Pclass.Survival2 <- round(tapply(titanic$Survived, titanic$Pclass, FUN = mean),2)
Pclass.Survival2
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Pclass == i) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
nrow(titanic)
ncol(titanic)
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
nrow(titanic)
ncol(titanic)
new_col <- rep(NA, nrow(titanic))
new_col[titanic['Survived'] == 0] = 'died'
new_col[titanic['Survived'] == 1] = 'survived'
titanic['Survived.Word'] = new_col
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
new_col[titanic['Survived'] == 0] = 'died'
new_col[titanic['Survived'] == 1] = 'survived'
titanic['Survived.Word'] = new_col
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
# The mean of 'Survived' tells us that about 38.38% of people are survived.
# The mean of 'Age' is NA since there are NA in the column of 'Age'.
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
# The mean of 'Survived' tells us that about 38.38% of people are survived.
# The mean of 'Age' is NA since there are NA in the column of 'Age'.
```
ii. Compute the proportion of female passengers who survived the titanic disaster. Round your answer to 2 decimals using the round() function. Hint ?round.
```{r}
new_col4 <- titanic['Sex']
x2 <- cbind(new_col1,new_col2,new_col3,new_col4)
x2_female <- x2[which(x2$Sex=='female'),][,1:3]
round(apply(x2_female, 2, mean),2)
```
iii. Of the survivors, compute the proportion of female passengers. Round your answer to 2 decimals. This answer may take a few lines of code. One strategy would be to create a survivors matrix that only includes individuals who survived the disaster. Then using the survived matrix, calculate the proportion of females.
```{r}
x_svr_total <- x2[which(x2$Survived == 1) ,]
x_svrf <- x2[which((x2$Survived == 1) &(x2$Sex == 'female')),]
round(nrow(x_svrf)/nrow(x_svr_total),2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Pclass == i) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
```
v. Now create a Pclass.Survival2 vector that should equal the Pclass.Survival vector
Pclass.Survival2 <- Pclass.Survival
Pclass.Survival2 <- round(tapply(titanic$Survived, titanic$Pclass, FUN = mean),2)
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
nrow(titanic)
ncol(titanic)
new_col <- rep(NA, nrow(titanic))
new_col[titanic['Survived'] == 0] = 'died'
new_col[titanic['Survived'] == 1] = 'survived'
titanic['Survived.Word'] = new_col
new_col1 <- titanic['Survived']
new_col2 <- titanic['Age']
new_col3 <- titanic['Fare']
x <- cbind(new_col1,new_col2,new_col3)
apply(x, 2, mean)
# The mean of 'Survived' tells us that about 38.38% of people are survived.
# The mean of 'Age' is NA since there are NA in the column of 'Age'.
new_col4 <- titanic['Sex']
x2 <- cbind(new_col1,new_col2,new_col3,new_col4)
x2_female <- x2[which(x2$Sex=='female'),][,1:3]
round(apply(x2_female, 2, mean),2)
x_svr_total <- x2[which(x2$Survived == 1) ,]
x_svrf <- x2[which((x2$Survived == 1) &(x2$Sex == 'female')),]
round(nrow(x_svrf)/nrow(x_svr_total),2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Pclass == i) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
Pclass.Survival
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
new_col4 <- titanic['Sex']
x2 <- cbind(new_col1,new_col2,new_col3,new_col4)
x2_female <- x2[which(x2$Sex=='female'),][,1:3]
mat <- round(apply(x2_female, 2, mean),2)
mode(mat)
mode(mat)
num <- mat[1]
mode(mat)
mat[1]
?tapply
?tapply
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
titanic <- data.frame(read.table("/Users/xuansijian/Desktop/Titanic.txt", header = TRUE, as.is = TRUE))
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
x_svr_totali <- titanic[which(titanic$Pclass == i) ,]
x_svrfi <- titanic[which((titanic$Survived == 1) &(titanic$Pclass == i)),]
y <- round(nrow(x_svrfi)/nrow(x_svr_totali),2)
Pclass.Survival[i] <- y
}
Pclass.Survival
Pclass.Survival2 <- Pclass.Survival
tapply(titanic$Survived, titanic$Pclass, FUN = mean)
gamma??
?sad
??gamma
?ecdf
?pgamma
pgamma(90,196,2.5)
1-pgamma(90,196,2.5)
pgamma(67.2,196,2.5)
pgamma(100,196,2.5)
1-pgamma(100,196,2.5)
x <- -1 -1 -1 -1 -1 -1 -1 -0.761 0.438 0.691 -0.993 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.842 0.724 1 0.88 -0.896 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.725 0.538 1 0.948 -0.446 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.742 0.79 1 0.818 -0.695 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0.631 1 0.899 -0.561 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.508 0.983 1 -0.26 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.984 0.535 1 0.469 -0.935 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.596 0.992 1 -0.513 -1 -1 -1 -0.965 -0.66 -0.66 -0.789 -1 -1 -1 -1 -1 0.37 1 0.692 -0.948 -1 -0.894 -0.452 0.504 1 1 0.877 -0.489 -1 -1 -1 -0.906 0.917 1 -0.013 -1 -0.341 0.733 1 1 1 1 1 0.802 -0.795 -1 -1 -0.779 0.968 1 -0.655 -0.334 0.961 1 0.911 0.498 -0.43 -0.109 1 0.901 -0.884 -1 -1 -0.691 1 0.852 -0.453 0.906 1 0.661 -0.512 -1 -0.958 0.551 1 0.173 -1 -1 -1 -0.937 0.989 0.984 0.842 1 0.777 -0.761 -1 -0.829 0.28 1 0.508 -0.918 -1 -1 -1 -1 0.042 1 1 1 0.091 -0.915 -0.35 0.698 1 0.699 -0.851 -1 -1 -1 -1 -1 -0.921 0.358 1 1 1 1 1 1 0.813 -0.723 -1 -1 -1 -1 -1 -1 -1 -1 0.182 1 1 1 0.679 -0.017 -0.907 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -0.761 0.438 0.691 -0.993 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.842 0.724 1 0.88 -0.896 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.725 0.538 1 0.948 -0.446 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.742 0.79 1 0.818 -0.695 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0.631 1 0.899 -0.561 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.508 0.983 1 -0.26 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.984 0.535 1 0.469 -0.935 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -0.596 0.992 1 -0.513 -1 -1 -1 -0.965 -0.66 -0.66 -0.789 -1 -1 -1 -1 -1 0.37 1 0.692 -0.948 -1 -0.894 -0.452 0.504 1 1 0.877 -0.489 -1 -1 -1 -0.906 0.917 1 -0.013 -1 -0.341 0.733 1 1 1 1 1 0.802 -0.795 -1 -1 -0.779 0.968 1 -0.655 -0.334 0.961 1 0.911 0.498 -0.43 -0.109 1 0.901 -0.884 -1 -1 -0.691 1 0.852 -0.453 0.906 1 0.661 -0.512 -1 -0.958 0.551 1 0.173 -1 -1 -1 -0.937 0.989 0.984 0.842 1 0.777 -0.761 -1 -0.829 0.28 1 0.508 -0.918 -1 -1 -1 -1 0.042 1 1 1 0.091 -0.915 -0.35 0.698 1 0.699 -0.851 -1 -1 -1 -1 -1 -0.921 0.358 1 1 1 1 1 1 0.813 -0.723 -1 -1 -1 -1 -1 -1 -1 -1 0.182 1 1 1 0.679 -0.017 -0.907 -1 -1 -1 -1 -1
setwd("~/")
test <- read.csv("zip_test.txt")
train <- read.table("zip_train.txt")
dim(train)
View(train)
test <- read.table("zip_test.txt")
dim(test)
View(train)
require(GARPFRM)
install.packages("GARPFRM")
install.packages("GARPFRM")
install.packages("GARPFRM")
install.packages(GARPFRM)
install.packages("GARPFRM")
require(GARPFRM)
library("GARPFRM")
install.packages("GARPFRM")
install.packages("GARPFRM")
library("GARPFRM")
require(GARPFRM)
install.packages("GARPFRM", repos="http://R-Forge.R-project.org")
library("GARPFRM")
require(GARPFRM)
install.packages("GARPFRM", repos="http://R-Forge.R-project.org")
install.packages("GARPFRM", repos="http://R-Forge.R-project.org")
help()
help("GARPFRM")
??garpfrm
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("Matrix", "Rcpp", "assertthat", "cluster", "codetools", "colorspace", "digest", "foreign", "ggplot2", "jsonlite", "knitr", "lattice", "mgcv", "nlme", "rmarkdown", "scales", "stringi", "stringr", "survival", "tibble", "yaml"))
mtx.exp <- function (X, n)
{
if (n != round(n)) {
n <- round(n)
warning("rounding exponent `n' to", n)
}
phi <- diag(nrow = nrow(X))
pot <- X
while (n > 0) {
if (n%%2)
phi <- phi %*% pot
n <- n%/%2
pot <- pot %*% pot
}
return(phi)
}
xx <- matrix(c(1/8,7/8,0,0,0,1/4,6/8,0,0,0,3/8,5/8,0,0,0,1), 4, 4)
xx
xx <- (xx)T
xx <- t(xx)
xx
mtx.exp(xx,8)
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
#
library("rvest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("tibble", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
print(R.version)
library("rvest")
library("rvest")
library("tibble")
library("gplots")
library("dplyr")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("/Users/xuansijian/Desktop/wk2-TextMining/lib/plotstacked.R")
source("/Users/xuansijian/Desktop/wk2-TextMining/lib/speechFuncs.R")
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
inaug=f.speechlinks(main.page)
head(inaug)
head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
nomin <- f.speechlinks(main.page)
nomin <- f.speechlinks(main.page)
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
nomin <- f.speechlinks(main.page)
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
farewell <- f.speechlinks(main.page)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
nomin <-nomin[-47,]
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
nomin <-nomin[-47,]
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
source("/Users/xuansijian/Desktop/wk2-TextMining/lib/plotstacked.R")
source("/Users/xuansijian/Desktop/wk2-TextMining/lib/speechFuncs.R")
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
nomin <- f.speechlinks(main.page)
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
farewell <- f.speechlinks(main.page)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
nomin <-nomin[-47,]
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
speech.list$fulltext=NA
View(speech.list)
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
save.image("~/Untitled.RData")
knitr::opts_chunk$set(echo = TRUE)
folder.path="/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches"
folder.path="/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
speech.list=read.csv("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InaugurationInfo.csv")
speech.list$fulltext=NA
speeches <- factor(speeches)
class(speeches)
text<- NULL
for (i in 1:2){
text[i] <- readLines(speeches[i])
}
for (i in 1:2){
text[i] <- readLines(speeches[i],con = stdin())
}
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:2){
text[i] <- readLines(file(speeches[i]))
}
text[1] <- readLines(speeches[1])
folder.path="/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
speech.list=read.csv("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InaugurationInfo.csv")
speech.list$fulltext=NA
speeches <- factor(speeches)
class(speeches)
text<- NULL
text[1] <- readLines(speeches[1])
readLines(speeches[1])
class(speeches)
speeches <- character(speeches)
folder.path="/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
class(speeches)
speech.list=read.csv("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InaugurationInfo.csv")
readLines(speeches[1])
speeches
speeches[1]
readLines(speeches[1])
readLines("inaugAbrahamLincoln-1.txt")
getwd()
setwd("~/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches")
readLines("inaugAbrahamLincoln-1.txt")
getwd()
setwd("~/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches")
getwd()
setwd("~/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches")
getwd()
readLines("inaugAbrahamLincoln-1.txt")
getwd()
