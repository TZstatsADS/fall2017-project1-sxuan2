subdf = df[df$President == unique_president[1], ]
subdf = subdf[order(subdf$index), ]
subdf
View(subdf)
subdf = df[df$President == unique_president[1], ]
View(subdf)
df = speech_length_sort[order(speech_length_sort$President), ]
unique_president = unique(speech_length_sort$President)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[nrow(subdf)]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[nrow(subdf)]- subdf$Words[1]
}
}
df = speech_length_sort[order(speech_length_sort$President), ]
unique_president = unique(speech_length_sort$President)
speechdiff = NULL
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[nrow(subdf)]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[nrow(subdf)]- subdf$Words[1]
}
}
df = speech_length_sort[order(speech_length_sort$President), ]
View(df)
unique_president = unique(speech_length_sort$President)
unique_president
speechdiff = NULL
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[nrow(subdf)]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[nrow(subdf)]- subdf$Words[1]
}
}
subdf = df[df$President == unique_president[2], ]
subdf
View(subdf)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
print(as.character(unique(subdf$President)))
print(subdf$Words[nrow(subdf)]- subdf$Words[1])
#speechdiff[i,1] = as.character(unique(subdf$President))
#speechdiff[i,2] = subdf$Words[nrow(subdf)]- subdf$Words[1]
}
}
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
print(as.character(unique(subdf$President)))
print(subdf$Words[2]- subdf$Words[1])
#speechdiff[i,1] = as.character(unique(subdf$President))
#speechdiff[i,2] = subdf$Words[nrow(subdf)]- subdf$Words[1]
}
}
df = speech_length_sort[order(speech_length_sort$President), ]
unique_president = unique(speech_length_sort$President)
speechdiff = NULL
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[2]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
dim(speechdiff)
?rep
?matrix
speechdiff = matrix(data = NA,58,2)
View(speechdiff)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[2]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
speechdiff = na.omit(speechdiff)
plot(speechdiff)
plot(nrow(speechdiff),speechdiff$V2)
speechdiff = df(data = NA,58,2)
?df
?data.frame
speechdiff = data.frame(data = NA,58,2)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[2]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
speechdiff = na.omit(speechdiff)
speechdiff = data.frame(data = NA,58,2)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[2]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
speechdiff = data.frame(data = NA)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
#print(as.character(unique(subdf$President)))
#print(subdf$Words[2]- subdf$Words[1])
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
speechdiff = na.omit(speechdiff)
speechdiff
plot(nrow(speechdiff),speechdiff$V2)
speechdiff$V2
nrow(speechdiff)
plot(1:nrow(speechdiff),speechdiff$V2)
?plot
plot(1:nrow(speechdiff),speechdiff$V2,type = "l")
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
plot(speechdiff$data,speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
plot(speechdiff$data,speechdiff$V2)
1:nrow(speechdiff)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
?text
text(speechdiff$data)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
text(speechdiff$data)
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
K <- nrow(speechdiff); text(speechdiff$data)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff");K <- nrow(speechdiff); text(speechdiff$data)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
k <- nrow(speechdiff); text(speechdiff$data[k])
speechdiff$data[1]
plot(1:10, 1:10, main = "text(...) examples\n~~~~~~~~~~~~~~",
sub = "R is GNU ©, but not ® ...")
mtext("«Latin-1 accented chars»: éè øØ å<Å æ<Æ", side = 3)
text(speechdiff$data[1:nrow(speechdiff)])
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
text(speechdiff$data[1:nrow(speechdiff)])
text(1:nrow(speechdiff),speechdiff$V2,speechdiff$data)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
text(1:nrow(speechdiff),speechdiff$V2,speechdiff$data)
class(speechdiff$data)
text(x = 1:nrow(speechdiff),y = speechdiff$V2,label = speechdiff$data)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
text(x = 1:nrow(speechdiff),y = speechdiff$V2,label = speechdiff$data)
text(x = 1:nrow(speechdiff),y = speechdiff$V2[1:nrow(speechdiff)],label = speechdiff$data[1:nrow(speechdiff)])
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
text(x = 1:nrow(speechdiff),y = speechdiff$V2[1:nrow(speechdiff)],label = speechdiff$data[1:nrow(speechdiff)])
1:nrow(speechdiff)
speechdiff$V2[1:nrow(speechdiff)]
speechdiff$data[1:nrow(speechdiff)]
for (i in 1:speechdiff){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
speechdiff = na.omit(speechdiff)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:speechdiff){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
text(x = 1,y = speechdiff$V2[1],label = speechdiff$data[1])
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:speechdiff){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
plot.new(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
head(word_count_column_1$President,n = 10)
head(speech_length_sort, n = 10)
head(speech_length_sort$President, n = 10)
knitr::opts_chunk$set(echo = TRUE)
getwd()
?line
abline(h = 0)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
abline(h = 0)
View(speechdiff)
repub_corpus.list=Republican_sentence.list[2:(nrow(Republican_sentence.list)-1), ]
sentence.pre=Republican_sentence.list$sentences[1:(nrow(Republican_sentence.list)-2)]
sentence.post=Republican_sentence.list$sentences[3:(nrow(Republican_sentence.list)-1)]
repub_corpus.list$snipets=paste(sentence.pre, repub_corpus.list$sentences, sentence.post, sep=" ")
rm.rows=(1:nrow(repub_corpus.list))[repub_corpus.list$sent.id==1]
rm.rows=c(rm.rows, rm.rows-1)
repub_corpus.list=repub_corpus.list[-rm.rows, ]
repub_docs <- Corpus(VectorSource(repub_corpus.list$snipets))
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
?Corpus
library("tm")
repub_docs <- Corpus(VectorSource(repub_corpus.list$snipets))
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
library("qdap")
library("tm")
folder.path="/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
speeches=paste("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguralSpeeches/", speeches, sep = "")
speech.list=read.csv("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InaugurationInfo.csv")
speech.date = read.table("/Users/xuansijian/Documents/GitHub/fall2017-project1-sxuan2/data/InauguationDates.txt",sep = "\t", header = TRUE)
speech.list$index = 1:58
speech.list$fulltext=NA
text = NULL
for(i in 1:58){
text[i] = readLines(speeches[i])
}
speech.list = speech.list[order(speech.list$President),]
rownames(speech.list)= 1:58
speech.list$fulltext <- text
speech.list = speech.list[order(speech.list$index),]
rownames(speech.list)= 1:58
sentence.list = NULL
for(i in 1:nrow(speech.list)){
sentences = sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
word.count=word_count(sentences)
# colnames(emotions)=paste0("emo.", colnames(emotions))
# in case the word counts are zeros?
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
sent.id=1:length(sentences)
)
)
}
}
Republican_sentence.list = sentence.list[sentence.list$Party == "Republican",]
Democracy_sentence.list = sentence.list[sentence.list$Party == "Democratic",]
Republican_sentence.list = na.exclude(Republican_sentence.list)
Democracy_sentence.list = na.exclude(Democracy_sentence.list)
word_count_colum_1 = NULL
word_count_column_1 = sentence.list[order(sentence.list$word.count, decreasing = TRUE),]# to see who use longer sentences
head(word_count_column_1$President,n = 10)
speech_length_sort = NULL
speech.list$Words = as.numeric(as.character(speech.list$Words))
speech_length_sort = speech.list[order(speech.list$Words, decreasing = TRUE),]
head(speech_length_sort$President, n = 10)
df = speech_length_sort[order(speech_length_sort$President), ]
unique_president = unique(speech_length_sort$President)
speechdiff = data.frame(data = NA)
for(i in 1:length(unique_president)){
subdf = df[df$President == unique_president[i], ]
subdf = subdf[order(subdf$index), ]
if(nrow(subdf) > 1){
speechdiff[i,1] = as.character(unique(subdf$President))
speechdiff[i,2] = subdf$Words[2]- subdf$Words[1]
}
}
speechdiff = na.omit(speechdiff)
plot(1:nrow(speechdiff),speechdiff$V2,type = "l",xlab = "time", ylab = "wordsdiff")
for (i in 1:nrow(speechdiff)){
text(x = i,y = speechdiff$V2[i],label = speechdiff$data[i])
}
abline(h = 0)
repub_corpus.list=Republican_sentence.list[2:(nrow(Republican_sentence.list)-1), ]
sentence.pre=Republican_sentence.list$sentences[1:(nrow(Republican_sentence.list)-2)]
sentence.post=Republican_sentence.list$sentences[3:(nrow(Republican_sentence.list)-1)]
repub_corpus.list$snipets=paste(sentence.pre, repub_corpus.list$sentences, sentence.post, sep=" ")
rm.rows=(1:nrow(repub_corpus.list))[repub_corpus.list$sent.id==1]
rm.rows=c(rm.rows, rm.rows-1)
repub_corpus.list=repub_corpus.list[-rm.rows, ]
repub_docs <- Corpus(VectorSource(repub_corpus.list$snipets))
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
repub_docs <-tm_map(repub_docs,content_transformer(tolower))
repub_docs <- tm_map(repub_docs, removePunctuation)
repub_docs <- tm_map(repub_docs, removeNumbers)
repub_docs <- tm_map(repub_docs, removeWords, stopwords("english"))
repub_docs <- tm_map(repub_docs, stripWhitespace)
repub_docs <- tm_map(repub_docs,stemDocument)
writeLines(as.character(repub_docs[[sample(1:nrow(repub_corpus.list), 1)]]))
dtm <- DocumentTermMatrix(repub_docs)
rownames(dtm) <- paste(repub_corpus.list$type, repub_corpus.list$File,
repub_corpus.list$Term, repub_corpus.list$sent.id, sep="_")
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
dtm  <- dtm[rowTotals> 0, ]
dtm  <- dtm[rowTotals> 0, ]
repub_corpus.list=repub_corpus.list[rowTotals>0, ]
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
k <- 5
ldaOut <-LDA(dtm, k, method="Gibbs", control=list(nstart = nstart,
seed = seed, best = best,
burnin = burnin, iter = iter,
thin=thin))
library("topicmodels")
ldaOut <-LDA(dtm, k, method="Gibbs", control=list(nstart = nstart,
seed = seed, best = best,
burnin = burnin, iter = iter,
thin=thin))
ldaOut.topics <- as.matrix(topics(ldaOut))
table(c(1:k, ldaOut.topics))
write.csv(ldaOut.topics,file=paste("/Users/xuansijian/LDAGibbs","REP",k,"DocsToTopics.csv"))
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste("/Users/xuansijian/LDAGibbs","REP",k,"TopicsToTerms.csv"))
topicProbabilities <- as.data.frame(ldaOut@gamma)
write.csv(topicProbabilities,file=paste("/Users/xuansijian/LDAGibbs","REP",k,"TopicProbabilities.csv"))
terms.beta=ldaOut@beta
terms.beta=scale(terms.beta)
topics.terms=NULL
for(i in 1:k){
topics.terms=rbind(topics.terms, ldaOut@terms[order(terms.beta[i,], decreasing = TRUE)[1:7]])
}
topics.terms
ldaOut.terms
demo_corpus.list=Democracy_sentence.list[2:(nrow(Democracy_sentence.list)-1), ]
sentence.pre=Democracy_sentence.list$sentences[1:(nrow(Democracy_sentence.list)-2)]
sentence.post=Democracy_sentence.list$sentences[3:(nrow(Democracy_sentence.list)-1)]
demo_corpus.list$snipets=paste(sentence.pre, demo_corpus.list$sentences, sentence.post, sep=" ")
rm.rows=(1:nrow(demo_corpus.list))[demo_corpus.list$sent.id==1]
rm.rows=c(rm.rows, rm.rows-1)
demo_corpus.list=demo_corpus.list[-rm.rows, ]
demo_docs <- Corpus(VectorSource(demo_corpus.list$snipets))
writeLines(as.character(demo_docs[[sample(1:nrow(demo_corpus.list), 1)]]))
demo_docs <-tm_map(demo_docs,content_transformer(tolower))
demo_docs <- Corpus(VectorSource(demo_corpus.list$snipets))
demo_docs <-tm_map(demo_docs,content_transformer(tolower))
demo_docs <- tm_map(demo_docs, removePunctuation)
repub_docs <- tm_map(demo_docs, removeNumbers)
demo_docs <- tm_map(demo_docs, removeWords, stopwords("english"))
demo_docs <- tm_map(demo_docs,stemDocument)
writeLines(as.character(demo_docs[[sample(1:nrow(demo_corpus.list), 1)]]))
dtm <- DocumentTermMatrix(demo_docs)
rownames(dtm) <- paste(demo_corpus.list$type, demo_corpus.list$File,
demo_corpus.list$Term, demo_corpus.list$sent.id, sep="_")
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
dtm  <- dtm[rowTotals> 0, ]
demo_corpus.list=demo_corpus.list[rowTotals>0, ]
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
k <- 5
ldaOut <-LDA(dtm, k, method="Gibbs", control=list(nstart = nstart,
seed = seed, best = best,
burnin = burnin, iter = iter,
thin=thin))
ldaOut.topics <- as.matrix(topics(ldaOut))
table(c(1:k, ldaOut.topics))
write.csv(ldaOut.topics,file=paste("/Users/xuansijian/LDAGibbs","DEM",k,"DocsToTopics.csv"))
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste("/Users/xuansijian/LDAGibbs","DEM",k,"TopicsToTerms.csv"))
topicProbabilities <- as.data.frame(ldaOut@gamma)
write.csv(topicProbabilities,file=paste("/Users/xuansijian/LDAGibbs","DEM",k,"TopicProbabilities.csv"))
terms.beta=ldaOut@beta
terms.beta=scale(terms.beta)
topics.terms=NULL
for(i in 1:k){
topics.terms=rbind(topics.terms, ldaOut@terms[order(terms.beta[i,], decreasing = TRUE)[1:7]])
}
topics.terms
ldaOut.terms
tdm.all<-TermDocumentMatrix(demo_docs)
tdm.tidy=tidy(tdm.all)
library(wordcloud)
library(tidytext)
tdm.all<-TermDocumentMatrix(demo_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
library(RColorBrewer)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
tdm.all<-TermDocumentMatrix(demo_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
?summarise
library("dplyr")
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.all<-TermDocumentMatrix(repub_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.all<-TermDocumentMatrix(demo_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.all<-TermDocumentMatrix(repub_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.all<-TermDocumentMatrix(demo_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
tdm.all<-TermDocumentMatrix(repub_docs)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
